use once_cell::sync::Lazy;
use std::str::FromStr;

use num_bigint::BigInt;

pub mod chaum_pedersen;

/// Parameters for Chaum-Pedersen zk protocol. These include:
///     `bit_size` - number of bits for the base prime field.
///     `p` - order of the base prime field.
///     `q` - order of the cyclic subgroup generated by the two generators of the multiplicative subgroup of the base prime field (these generators have the same order necessarily). Notice that q | p - 1.
///     `g` - a generator of the multiplicative subgroup of the base prime field of order `q`.
///     `h` - a generator of the multiplicative subgroup of the base prime field of order `q`.
pub struct Parameters {
    pub bit_size: u64,
    pub p: BigInt,
    pub q: BigInt,
    pub g: BigInt,
    pub h: BigInt,
}

/// Default parameters for Chaum-Pedersen zk protocol, relying on `BigInt` exponentiation
pub static DEFAULT_PARAMS: Lazy<Parameters> = Lazy::new(|| Parameters {
    bit_size: 256,
    p: BigInt::from_str(
        "42765216643065397982265462252423826320512529931694366715111734768493812630447",
    )
    .unwrap(),
    q: BigInt::from_str(
        "21382608321532698991132731126211913160256264965847183357555867384246906315223",
    )
    .unwrap(),
    g: BigInt::from_str("4").unwrap(),
    h: BigInt::from_str("9").unwrap(),
});
